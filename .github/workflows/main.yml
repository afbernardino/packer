name: 'Main'

on: workflow_dispatch

jobs:
  quality:
    name: Check quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21.5'
      - name: Run go vet
        run: make vet
  build-copy-api:
    name: Build and copy api
    runs-on: ubuntu-latest
    needs: [quality]
    if: ${{ success() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set GITHUB_ENV
        run: |
          echo "SHORT_REF=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: api:${{ env.SHORT_REF }},api:${{ env.SHORT_SHA }}
          outputs: |
            type=docker,dest=api.tar
      - name: Zip
        run: gzip api.tar
      - name: Copy
        uses: appleboy/scp-action@master
        with:
          proxy_host: ${{ secrets.SSH_BASTION_HOST }}
          proxy_username: ${{ secrets.SSH_BASTION_USERNAME }}
          proxy_key: ${{ secrets.SSH_BASTION_PRIVATE_KEY }}
          host: ${{ secrets.SSH_API_HOST }}
          username: ${{ secrets.SSH_API_USERNAME }}
          key: ${{ secrets.SSH_API_PRIVATE_KEY }}
          source: api.tar.gz
          target: '~/api'
  load-start:
    name: Load images and start containers
    runs-on: ubuntu-latest
    needs: [build-copy-api]
    if: ${{ success() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set GITHUB_ENV
        run: |
          echo "SHORT_REF=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2
        with:
          envkey_PACK_SIZES: ${{ vars.PACK_SIZES }}
          envkey_RELEASE_TAG: ${{ env.SHORT_SHA }}
          directory: ./
          file_name: .env
      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          proxy_host: ${{ secrets.SSH_BASTION_HOST }}
          proxy_username: ${{ secrets.SSH_BASTION_USERNAME }}
          proxy_key: ${{ secrets.SSH_BASTION_PRIVATE_KEY }}
          host: ${{ secrets.SSH_API_HOST }}
          username: ${{ secrets.SSH_API_USERNAME }}
          key: ${{ secrets.SSH_API_PRIVATE_KEY }}
          source: '.env,docker-compose.yml'
          target: '~/api'
      - name: Load images and start containers
        uses: appleboy/ssh-action@master
        with:
          proxy_host: ${{ secrets.SSH_BASTION_HOST }}
          proxy_username: ${{ secrets.SSH_BASTION_USERNAME }}
          proxy_key: ${{ secrets.SSH_BASTION_PRIVATE_KEY }}
          host: ${{ secrets.SSH_API_HOST }}
          username: ${{ secrets.SSH_API_USERNAME }}
          key: ${{ secrets.SSH_API_PRIVATE_KEY }}
          script: |
            gunzip ~/api/api.tar.gz ; docker load -i ~/api/api.tar
            cd ~/api
            docker-compose -f docker-compose.yml up -d
  cleanup:
    name: Clean up
    runs-on: ubuntu-latest
    needs: [load-start]
    if: ${{ success() }}
    steps:
      - name: Remove tarballs, zip files and prune docker system
        uses: appleboy/ssh-action@master
        with:
          proxy_host: ${{ secrets.SSH_BASTION_HOST }}
          proxy_username: ${{ secrets.SSH_BASTION_USERNAME }}
          proxy_key: ${{ secrets.SSH_BASTION_PRIVATE_KEY }}
          host: ${{ secrets.SSH_API_HOST }}
          username: ${{ secrets.SSH_API_USERNAME }}
          key: ${{ secrets.SSH_API_PRIVATE_KEY }}
          script: |
            rm -rf ~/api/*.tar.gz
            rm -rf ~/api/*.tar
            docker system prune --all --force
